@startuml
!theme aws-orange
skinparam componentStyle rectangle
skinparam backgroundColor #FAFAFA
skinparam componentBackgroundColor #E8F5E8
skinparam componentBorderColor #4CAF50
skinparam interfaceBackgroundColor #FFF3E0
skinparam interfaceBorderColor #FF9800

title HIV Clinic Management System - Component Diagram

package "Frontend Layer" {
    component [React Application] as ReactApp {
        component [Authentication Context] as AuthContext
        component [User Interface Components] as UIComponents
        component [Feature Modules] as FeatureModules
        component [API Service Layer] as APIServices
        component [Router Module] as Router
    }
    
    package "UI Components" {
        component [Layout Components] as Layout
        component [Form Components] as Forms
        component [Notification Components] as NotifComponents
        component [ARV Treatment Components] as ARVComponents
        component [Schedule Components] as ScheduleComponents
    }
    
    package "Feature Modules" {
        component [Admin Dashboard] as AdminDash
        component [Doctor Dashboard] as DoctorDash
        component [Patient Dashboard] as PatientDash
        component [Manager Dashboard] as ManagerDash
        component [Authentication Module] as AuthModule
        component [Settings Module] as SettingsModule
    }
    
    package "Services" {
        component [Auth Service] as AuthService
        component [Notification Service] as NotificationService
        component [API Client] as APIClient
    }
}

package "Backend Layer" {
    component [Spring Boot Application] as SpringApp {
        component [Security Configuration] as SecurityConfig
        component [JWT Authentication] as JWTAuth
        component [REST Controllers] as Controllers
        component [Service Layer] as Services
        component [Data Access Layer] as DataAccess
    }
    
    package "Controllers" {
        component [Auth Controller] as AuthController
        component [Appointment Controller] as AppointmentController
        component [Notification Controller] as NotificationController
        component [ARV Treatment Controller] as ARVController
        component [User Controller] as UserController
    }
    
    package "Services" {
        component [Authentication Service] as AuthServiceBackend
        component [Appointment Service] as AppointmentService
        component [Notification Service] as NotificationServiceBackend
        component [ARV Treatment Service] as ARVService
        component [User Service] as UserService
        component [Email Service] as EmailService
    }
    
    package "Repositories" {
        component [User Repository] as UserRepo
        component [Appointment Repository] as AppointmentRepo
        component [Notification Repository] as NotificationRepo
        component [ARV Treatment Repository] as ARVRepo
    }
    
    package "Entities" {
        component [User Entity] as UserEntity
        component [Appointment Entity] as AppointmentEntity
        component [Notification Entity] as NotificationEntity
        component [ARV Treatment Entity] as ARVEntity
    }
}

package "Database Layer" {
    database "MS SQL Server" as Database {
        component [User Tables] as UserTables
        component [Appointment Tables] as AppointmentTables
        component [Notification Tables] as NotificationTables
        component [ARV Treatment Tables] as ARVTables
    }
}

package "External Services" {
    component [Email Provider] as EmailProvider
    component [SMS Provider] as SMSProvider
}

' Frontend Internal Connections
ReactApp --> UIComponents
ReactApp --> FeatureModules
ReactApp --> APIServices
ReactApp --> AuthContext
ReactApp --> Router

UIComponents --> Layout
UIComponents --> Forms
UIComponents --> NotifComponents
UIComponents --> ARVComponents
UIComponents --> ScheduleComponents

FeatureModules --> AdminDash
FeatureModules --> DoctorDash
FeatureModules --> PatientDash
FeatureModules --> ManagerDash
FeatureModules --> AuthModule
FeatureModules --> SettingsModule

APIServices --> AuthService
APIServices --> NotificationService
APIServices --> APIClient

' Frontend to Backend Connections
APIClient --> SpringApp : "HTTPS/REST API"
AuthService --> AuthController : "Authentication Requests"
NotificationService --> NotificationController : "Notification Requests"

' Backend Internal Connections
SpringApp --> SecurityConfig
SpringApp --> JWTAuth
SpringApp --> Controllers
SpringApp --> Services
SpringApp --> DataAccess

Controllers --> AuthController
Controllers --> AppointmentController
Controllers --> NotificationController
Controllers --> ARVController
Controllers --> UserController

Services --> AuthServiceBackend
Services --> AppointmentService
Services --> NotificationServiceBackend
Services --> ARVService
Services --> UserService
Services --> EmailService

DataAccess --> UserRepo
DataAccess --> AppointmentRepo
DataAccess --> NotificationRepo
DataAccess --> ARVRepo

' Service to Repository Connections
AuthServiceBackend --> UserRepo
AppointmentService --> AppointmentRepo
NotificationServiceBackend --> NotificationRepo
ARVService --> ARVRepo
UserService --> UserRepo

' Repository to Entity Connections
UserRepo --> UserEntity
AppointmentRepo --> AppointmentEntity
NotificationRepo --> NotificationEntity
ARVRepo --> ARVEntity

' Backend to Database Connections
DataAccess --> Database : "JPA/Hibernate"
UserEntity --> UserTables
AppointmentEntity --> AppointmentTables
NotificationEntity --> NotificationTables
ARVEntity --> ARVTables

' External Service Connections
EmailService --> EmailProvider : "SMTP"
NotificationServiceBackend --> SMSProvider : "SMS API"

' Cross-layer Dependencies
AuthContext --> JWTAuth : "Token Validation"
SecurityConfig --> JWTAuth : "Authentication Filter"

@enduml