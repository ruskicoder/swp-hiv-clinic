sequenceDiagram
    participant A as Admin
    participant AD as AdminDashboard.jsx
    participant PT as PaginatedTable.jsx
    participant API as apiClient.js
    participant AC as AdminController.java
    participant AS as AdminService.java
    participant UR as UserRepository
    participant DB as Database

    A->>AD: View users section
    AD->>API: GET /api/admin/users
    API->>AC: getAllUsers()
    AC->>AS: getAllUsersWithProfiles()
    
    AS->>UR: findAllWithRoles()
    UR->>DB: SELECT users WITH roles
    DB-->>UR: User data with roles
    UR-->>AS: List<User>
    
    AS->>AS: attachProfileData(users)
    AS->>DB: JOIN with PatientProfiles, DoctorProfiles
    DB-->>AS: Enhanced user data
    
    AS-->>AC: List<UserDTO>
    AC-->>API: ResponseEntity.ok(users)
    API-->>AD: user list data
    
    AD->>PT: render paginated table
    PT->>PT: display users with role badges
    
    A->>PT: Click toggle user status
    PT->>API: PUT /api/admin/users/{id}/toggle-status
    API->>AC: toggleUserStatus(userId)
    AC->>AS: toggleActiveStatus(userId)
    AS->>UR: updateUserStatus(userId, newStatus)
    UR->>DB: UPDATE Users SET isActive = ?
    AS-->>AC: Updated user
    AC-->>API: ResponseEntity.ok()
    API-->>PT: Status updated
    PT->>PT: refresh user row
